=========================
How to use add_integer.py
=========================
Only one function called 'add_integer()'

Import module
=============
>>> add_integer = __import__('0-add_integer').add_integer

Return
======
'add_integer()' returns the addition of its arguments.

Tests numbers
=================
>>> add_integer(2, 98)
100
>>> add_integer(-2, 98)
96
>>> add_integer(2, -98)
-96
>>> add_integer(0, 98)
98
>>> add_integer(2)
100
>>> add_integer(2.2, 98)
100
>>> add_integer(2, 98.8)
100
>>> add_integer(2.2, 98.8)
100

Tests errors
============
    Test case "string"
    ------------------
>>> add_integer("Hello", 98)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, "World")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("Hello", "World")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(str(1), str(2))
Traceback (most recent call last):
TypeError: a must be an integer

    Test case "tuple"
    -----------------
>>> add_integer((0, 2), 98)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, (98, 100))
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer((0, 2), (98, 100))
Traceback (most recent call last):
TypeError: a must be an integer

    Test case "list"
    ----------------
>>> add_integer([0, 2], 98)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, [98, 100])
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer([0, 2], [98, 100])
Traceback (most recent call last):
TypeError: a must be an integer

    Test case "None"
    ----------------
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(None, None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'


    Test case "float('inf')" and "float('NaN')"
    -------------------------------------------
>>> add_integer(float("inf"))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(float("NaN"))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer